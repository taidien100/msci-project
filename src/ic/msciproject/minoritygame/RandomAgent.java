/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

package ic.msciproject.minoritygame;

import java.util.List;
import cern.jet.random.AbstractDistribution;
import cern.jet.random.Uniform;
import cern.jet.random.engine.MersenneTwister;

/**
 * The RandomAgent class represents a completely unintelligent agent in the
 * minority game simulation. It chooses between Choice.A and Choice.B based on
 * a random number distribution which is by default uniform.
 * @author tobyclemson
 */
public class RandomAgent extends AbstractAgent {
    /**
     * An AbstractDistribution, containing a random number generator that
     * implements the RandomGenerator interface, which returns random numbers
     * according to a particular distribution. This is used by the random agent
     * to return random choices. By default it is initialised with a Uniform
     * distribution backed by a MersenneTwister random number engine
     * initialised with a Date object.
     */
    private static AbstractDistribution randomNumberGenerator;

    // initialise the random number generator
    static {
        /*
         * generate an integer at random spanning the entire range of possible
         * integers as a seed
         */
        int randomSeed = (int) ((Math.random() - 0.5) * 2 * Integer.MAX_VALUE);

        /*
         * construct a uniform distribution backed by a MersenneTwister random
         * number generator using the random seed and set the static random
         * number generator to the constructed object.
         */
        randomNumberGenerator = new Uniform(new MersenneTwister(randomSeed));
    }

    /**
     * Constructs an instance of RandomAgent.
     * @param strategyCollection A StrategyCollection instance representing the
     * agent's strategies. This is temporary as it is not used and will be
     * removed.
     */
    public RandomAgent(StrategyCollection strategyCollection) {
        super(strategyCollection);
    }

    /**
     * Calculates this agent's choices based on a random number generated by the
     * random number generator associated with the RandomAgent class. The
     * random number generator should return integers in the range [0,1] with
     * zero corresponding to Choice.A and one corresponding to Choice.B
     * @param choiceHistory A List of Choice instances representing a fixed
     * number of past minority choices in the game.
     * @return The choice made by the agent.
     */
    @Override
    public Choice choose(List<Choice> choiceHistory) {
        Choice choice = null;

        if(randomNumberGenerator.nextInt() == 0) {
            choice = Choice.A;
        } else {
            choice = Choice.B;
        }

        lastChoice = choice;

        return choice;
    }
}
